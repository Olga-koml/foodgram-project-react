name: Foodgram workflow

on: [push]
jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python

        uses: actions/setup-python@v2
        with:
          python-version: 3.10

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
          pip install -r backend/requirements.txt
      - name: Test with flake8
        run: |
          python -m flake8

  # backend_build_and_push:
  build_and_push_backend_to_docker_hub:
    name: Build and Push Backend
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:v2.14.06.2023

  copy_compose:
    name: Copy compose
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          # passphrase: ${{ secrets.PASSPHRASE }}
          source: "infra/docker-compose.yml"
          target: "."
          strip_components: 1

  copy_docs:
    name: Copy Redocs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          # passphrase: ${{ secrets.PASSPHRASE }}
          source: "docs/*"
          target: "./docs/"
          strip_components: 1

  copy_nginx_conf:
    name: Copy nginx config
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          # passphrase: ${{ secrets.PASSPHRASE }}
          source: "infra/nginx.conf"
          target: "."
          strip_components: 1

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_backend_to_docker_hub
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          # passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd foodgram_project_diplom/
            sudo docker compose stop
            sudo docker compose down -v
            sudo docker compose rm -f backend
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:v.14.06.2023
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:v2.14.06.2023
            sudo rm -r .env
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            # echo HOST=${{ secrets.HOST }} >> .env
            # echo USER=${{ secrets.USER }} >> .env
            echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
            # sudo docker-compose stop
            # sudo docker-compose down -v
            # sudo docker-compose rm backend
            # sudo docker compose up -d --build
            sudo docker compose up -d
            # sudo docker exec vm-alexey_backend_1 python manage.py makemigrations
            # sudo docker exec vm-alexey_backend_1 python manage.py migrate --noinput
            # sudo docker exec vm-alexey_backend_1 python manage.py initadmin
            # sudo docker exec vm-alexey_backend_1 python manage.py collectstatic --no-input
            # sudo docker exec vm-alexey_backend_1 python loaddata.py
   
  send_message_to_telegram:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: Деплой ${{ github.workflow}} успешно завершился!
